buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = "https://lss233.littleservice.cn/repositories/minecraft" }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

group = 'org.bedracket'
version = '1.0-SNAPSHOT'

java {
    archivesBaseName = 'powerdocker'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {

    mappings channel: 'parchment', version: '2022.11.06-1.19.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'powerdocker'

            mods {
                powerdocker {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'powerdocker'

            mods {
                powerdocker {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'powerdocker'

            mods {
                powerdocker {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'powerdocker', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                powerdocker {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "powerdocker.refmap.json"

    config "powerdocker.mixins.json"
}

task mergeResources(type: Copy) {
    def generated = files("src/generated/resources")
    def resources = files("src/main/resources")

    from generated
    exclude(str -> {
        def file = file("src/main/resources/" + str.relativePath)
        return file.isFile() && !resources.contains(file)
    })
    into "$buildDir/resources/main"
}

compileJava.dependsOn mergeResources

repositories {

}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.1.58'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    from("LICENSE")
    exclude(".cache/**")
    exclude("org/bedracket/powerdocker/datagen/**")
    manifest {
        attributes([
                "Specification-Title"     : "powerdocker",
                "Specification-Vendor"    : "wdog5",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "wdog5",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
